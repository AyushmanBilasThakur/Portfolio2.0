{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\ayush\\\\Desktop\\\\Portfolio 2.0\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nexport default (function (_ref) {\n  var router = _ref.router;\n\n  if (process.browser) {\n    var normalizeTransition = function normalizeTransition(transition, to, from) {\n      if (typeof transition === 'function') {\n        transition = transition(to, from);\n      } else if (typeof transition === 'string') {\n        transition = {\n          name: transition\n        };\n      }\n\n      return transition;\n    };\n\n    var getTransition = function getTransition(route, args) {\n      var RouteComponent, routeTransition, layoutTransition, layouts, LayoutComponent;\n      return _regeneratorRuntime.async(function getTransition$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(!route || !route.matched.length || !route.matched[0].components[\"default\"])) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 2:\n              // The default router component\n              RouteComponent = route.matched[0].components[\"default\"]; // Resolve async component\n\n              if (!(typeof RouteComponent === 'function')) {\n                _context.next = 7;\n                break;\n              }\n\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(RouteComponent());\n\n            case 6:\n              RouteComponent = _context.sent;\n\n            case 7:\n              // ES compat\n              RouteComponent = RouteComponent[\"default\"] || RouteComponent;\n              routeTransition = normalizeTransition.apply(void 0, [RouteComponent.transition].concat(_toConsumableArray(args)));\n\n              if (RouteComponent.layout) {\n                layouts = router.app.$options.layouts;\n                LayoutComponent = layouts[RouteComponent.layout] || layouts[\"default\"];\n\n                if (LayoutComponent) {\n                  layoutTransition = normalizeTransition.apply(void 0, [LayoutComponent.transition].concat(_toConsumableArray(args)));\n                }\n              }\n\n              return _context.abrupt(\"return\", Object.assign({\n                name: 'page',\n                mode: 'out-in'\n              }, routeTransition || layoutTransition));\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    };\n\n    router.beforeEach(function _callee(to, from, next) {\n      var _ref2, _ref3, toTransition, fromTransition, _i2, _Object$keys, key;\n\n      return _regeneratorRuntime.async(function _callee$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(Promise.all([getTransition(to, [to, from]), getTransition(from, [to, from])]));\n\n            case 2:\n              _ref2 = _context2.sent;\n              _ref3 = _slicedToArray(_ref2, 2);\n              toTransition = _ref3[0];\n              fromTransition = _ref3[1];\n\n              if (fromTransition) {\n                for (_i2 = 0, _Object$keys = Object.keys(fromTransition); _i2 < _Object$keys.length; _i2++) {\n                  key = _Object$keys[_i2];\n\n                  // prefer `leave` transitions of 'from' route\n                  if (/leave/i.test(key)) {\n                    toTransition[key] = fromTransition[key];\n                  }\n                }\n              }\n\n              router.app.setTransition(toTransition);\n              next();\n\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      });\n    });\n  }\n});","map":null,"metadata":{},"sourceType":"module"}